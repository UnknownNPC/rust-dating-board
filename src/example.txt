
use serde::Deserialize;

async fn add_to_persons(
  person: web::Form<Person>,
  db_mutex: web::Data<Mutex<Db>>,
) -> impl Responder {
  let mut db = db_mutex.lock().unwrap();
  db.add(person.name.clone());
  println!("{:?}", db.persons);
  HttpResponse::Found().header("Location", "/").finish()
}

async fn get_persons(db_mutex: web::Data<Mutex<Db>>) -> impl Responder {
  let db = db_mutex.lock().unwrap();
  let persons_list = db.get();
  HttpResponse::Ok().body(
    List {
      persons: persons_list,
    }
    .render_once()
    .unwrap(),
  )
}
async fn delete_person(
  db_mutex: web::Data<Mutex<Db>>, 
  id: web::Path<(usize,)>,
) -> impl Responder {
  let mut db = db_mutex.lock().unwrap();
  db.delete(id.0);
  HttpResponse::Found().header("Location", "/list").finish()
}

      .route("/add", web::post().to(add_to_persons))
      .route("/list", web::get().to(get_persons))
      .service(web::resource("/delete/{id}").route(web::get().to(delete_person)))


#[derive(Deserialize)]
struct Person {
  name: String,
}